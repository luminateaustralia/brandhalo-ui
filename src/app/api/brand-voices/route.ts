import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { 
  createBrandVoice, 
  getBrandVoices, 
  initDatabase 
} from '@/lib/db';
import { BrandVoiceFormData } from '@/types/brandVoice';

// GET - Retrieve all brand voices for the current organization
export async function GET() {
  console.log('üîç Brand Voices API GET route called');
  try {
    // Ensure database is initialized
    await initDatabase();
    
    let orgId = null;
    try {
      const authResult = await auth();
      orgId = authResult?.orgId;
      console.log('üîç Auth result:', { orgId });
    } catch (error) {
      console.error('üîç Auth error:', error);
      throw error;
    }
    
    if (!orgId) {
      return NextResponse.json({ error: 'Organization ID required' }, { status: 401 });
    }

    const brandVoices = await getBrandVoices(orgId);
    
    return NextResponse.json(brandVoices);
  } catch (error) {
    console.error('Error fetching brand voices:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// POST - Create new brand voice
export async function POST(request: NextRequest) {
  console.log('üîç Brand Voices API POST route called');
  try {
    // Ensure database is initialized
    await initDatabase();
    
    let orgId = null;
    let userId = null;
    try {
      const authResult = await auth();
      orgId = authResult?.orgId;
      userId = authResult?.userId;
      console.log('üîç POST Auth result:', { orgId, userId });
    } catch (error) {
      console.error('üîç POST Auth error:', error);
      throw error;
    }
    
    if (!orgId || !userId) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
    }

    const voiceData: BrandVoiceFormData = await request.json();
    
    // Validate that required fields are present
    if (!voiceData.name || !voiceData.jobTitle || !voiceData.email) {
      return NextResponse.json({ error: 'Name, job title, and email are required' }, { status: 400 });
    }

    // Add metadata
    const completeVoiceData = {
      ...voiceData,
      id: '', // Will be generated by the database function
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const result = await createBrandVoice(orgId, completeVoiceData);
    
    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    console.error('Error creating brand voice:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}