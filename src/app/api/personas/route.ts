import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { 
  createPersona, 
  getPersonas, 
  initDatabase 
} from '@/lib/db';
import { PersonaFormData } from '@/types/persona';

export const runtime = 'edge';

// GET - Retrieve all personas for the current organization
export async function GET() {
  console.log('üîç Personas API GET route called');
  try {
    // Ensure database is initialized
    await initDatabase();
    
    let orgId = null;
    try {
      const authResult = await auth();
      orgId = authResult?.orgId;
      console.log('üîç Auth result:', { orgId });
    } catch (error) {
      console.error('üîç Auth error:', error);
      throw error;
    }
    
    if (!orgId) {
      return NextResponse.json({ error: 'Organization ID required' }, { status: 401 });
    }

    const personas = await getPersonas(orgId);
    
    return NextResponse.json(personas);
  } catch (error) {
    console.error('Error fetching personas:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// POST - Create new persona
export async function POST(request: NextRequest) {
  console.log('üîç Personas API POST route called');
  try {
    // Ensure database is initialized
    await initDatabase();
    
    let orgId = null;
    let userId = null;
    try {
      const authResult = await auth();
      orgId = authResult?.orgId;
      userId = authResult?.userId;
      console.log('üîç POST Auth result:', { orgId, userId });
    } catch (error) {
      console.error('üîç POST Auth error:', error);
      throw error;
    }
    
    if (!orgId || !userId) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
    }

    const personaData: PersonaFormData = await request.json();
    
    // Validate that required fields are present
    if (!personaData.name || !personaData.occupation || !personaData.age) {
      return NextResponse.json({ error: 'Name, occupation, and age are required' }, { status: 400 });
    }

    // Add metadata
    const completePersonaData = {
      ...personaData,
      id: '', // Will be generated by the database function
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const result = await createPersona(orgId, completePersonaData);
    
    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    console.error('Error creating persona:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
